name: DDocker to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Launch Express WAS with pm2
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.15.0]
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.10.5
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Get PNPM cache directory
        id: pnpm-cache-dir
        run: |
          echo "::set-output name=dir::$(pnpm config get store-dir)"
      - uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: ${{ steps.pnpm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: pnpm install

      - name: Configure .env variables
        run: |
          echo "PORT=${{ secrets.PORT }}" >> .env.development
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.development
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.development
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env.development
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.development
          echo "DB_SCHEMA=${{ secrets.DB_SCHEMA }}" >> .env.development
          echo "ORIGIN=${{ secrets.ORIGIN }}" >> .env.development
          echo "CREDENTIALS=${{ secrets.CREDENTIALS }}" >> .env.development
          echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}" >> .env.development
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env.development
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env.development

      - name: Install MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo service mysql start
          sudo mysql -u root -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_SCHEMA }};"
          sudo mysql -u root -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
          sudo mysql -u root -e "GRANT ALL PRIVILEGES ON *.* TO '${{ secrets.DB_USER }}'@'localhost';"
          sudo mysql -u root -e "FLUSH PRIVILEGES;"

      - name: Install Redis
        run: |
          sudo apt-get install -y redis
          sudo service redis start

      - name: Project running check
        run: pnpm dev & npx wait-on tcp:127.0.0.1:${{ secrets.PORT }} -t 120s

      - name: SSH deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USERNAME }}
          password: ${{ secrets.AWS_SSH_PASSWORD }}
          port: 22
          script: |
            sudo su
            cd ~/DDocker_BE
            git pull origin main
            pnpm reload
